-- Naigama Assembly Grammar

TOP                <- INSTRUCTIONS

S                  <- %s+
MULTILINECOMMENT   <- '--[[' ( !']]' .)* ']]'
COMMENT            <- '--' [^\n]* '\n'

__prefix           <- ( MULTILINECOMMENT / COMMENT / S )*

INSTRUCTIONS       <- INSTRUCTION+ END
INSTRUCTION        <- RULEINSTR /
                      LABELDEF

RULEINSTR          <- ANYINSTR / BACKCOMMITINSTR / CALLINSTR /
                      CATCHINSTR / CHARINSTR / BITMASKINSTR /
                      CLOSECAPTUREINSTR / COMMITINSTR /
                      INTRPCAPTUREINSTR /
                      ENDINSTR / FAILTWICEINSTR / FAILINSTR /
                      JUMPINSTR / NOOPINSTR / TRAPINSTR /
                      OPENCAPTUREINSTR / PARTIALCOMMITINSTR /
                      QUADINSTR /
                      RETINSTR / SETINSTR / RANGEINSTR /
                      SKIPINSTR / SPANINSTR / TESTANYINSTR /
                      TESTCHARINSTR / TESTQUADINSTR /
                      TESTSETINSTR / VARINSTR /
                      COUNTERINSTR / CONDJUMPINSTR

END                <- !.

ANYINSTR           <- 'any'
BACKCOMMITINSTR    <- 'backcommit' S LABEL
CALLINSTR          <- 'call' S LABEL
CATCHINSTR         <- ( 'catch' / 'choice' ) S LABEL
CHARINSTR          <- 'char' S HEXBYTE
BITMASKINSTR       <- 'bitmask' S UNSIGNED S HEXQUAD S HEXQUAD S HEXQUAD
CLOSECAPTUREINSTR  <- 'closecapture' S SLOT
COMMITINSTR        <- 'commit' S LABEL
ENDINSTR           <- 'end' S CODE
FAILINSTR          <- 'fail'
FAILTWICEINSTR     <- 'failtwice'
INTRPCAPTUREINSTR  <- 'intrpcapture' S INTRPCAPTURETYPES
                                         S ( SLOT / 'default' )
JUMPINSTR          <- 'jump' S LABEL
NOOPINSTR          <- 'noop'
TRAPINSTR          <- 'trap'
OPENCAPTUREINSTR   <- 'opencapture' S SLOT
PARTIALCOMMITINSTR <- 'partialcommit' S LABEL
QUADINSTR          <- 'quad' S QUAD
RETINSTR           <- 'ret'
SETINSTR           <- 'set' S SET
RANGEINSTR         <- 'range' S HEXBYTE S HEXBYTE
SKIPINSTR          <- 'skip' S UNSIGNED
SPANINSTR          <- 'span' S SET
TESTANYINSTR       <- 'testany' S LABEL
TESTCHARINSTR      <- 'testchar' S HEXBYTE S LABEL
TESTQUADINSTR      <- 'testquad' S QUAD S LABEL
TESTSETINSTR       <- 'testset' S SET S LABEL
VARINSTR           <- 'var' S SLOT
COUNTERINSTR       <- 'counter' S REGISTER S UNSIGNED
CONDJUMPINSTR      <- 'condjump' S REGISTER S LABEL

LABELDEF           <- LABEL COLON

-- terminals

CODE               <- UNSIGNED
HEXBYTE            <- [0-9a-fA-F]^2
HEXQUAD            <- [0-9a-fA-F]^1-8
LABEL              <- [a-zA-Z0-9_]^1-64
UNSIGNED           <- [0-9]+
NUMBER             <- '-'? [0-9]+
QUAD               <- [0-9a-fA-F]^8
SET                <- [0-9a-fA-F]^64
SLOT               <- UNSIGNED
REGISTER           <- UNSIGNED
TYPE               <- UNSIGNED
COLON              <- ':'
AMPERSAND          <- '&'

STRINGLITERAL      <- '\'' { ( '\\' ([nrtv\\'] / [0-9]^3) / [^'\\] )* } '\''

INTRPCAPTURETYPES  <- { 'ruint32' }
